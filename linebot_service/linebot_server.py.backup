import asyncio
import json
import logging
import os
import tempfile
from pathlib import Path
from typing import Optional

import aiohttp
import uvicorn
from fastapi import BackgroundTasks, FastAPI, File, HTTPException, Request, UploadFile
from fastapi.responses import JSONResponse

# LINE Bot SDK
from linebot.v3 import WebhookHandler
from linebot.v3.exceptions import InvalidSignatureError
from linebot.v3.messaging import (
    ApiClient,
    AudioMessage,
    Configuration,
    MessagingApi,
    MessagingApiBlob,
    ReplyMessageRequest,
    TextMessage,
)
from linebot.v3.webhooks import AudioMessageContent, MessageEvent, TextMessageContent

# 閮剖??亥?
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# 撱箇? FastAPI ?
app = FastAPI(
    title="LINE Bot Service",
    description="?游?隤颲刻??之隤?璅∪????喳??? LINE Bot",
    version="1.0.0",
)


class LineBotService:
    def __init__(self):
        """????LINE Bot ??"""
        # LINE Bot 閮剖?
        self.channel_access_token = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
        self.channel_secret = os.getenv("LINE_CHANNEL_SECRET")

        # ?璅∪?嚗?閮勗瘝? LINE Token ??瘜?????
        self.dev_mode = os.getenv("DEV_MODE", "true").lower() == "true"

        if not self.channel_access_token or not self.channel_secret:
            if not self.dev_mode:
                raise ValueError(
                    "隢身摰?LINE_CHANNEL_ACCESS_TOKEN ??LINE_CHANNEL_SECRET ?啣?霈"
                )
            else:
                logger.warning("??  ?璅∪?嚗INE Bot Token ?芾身摰??典??撠瘜蝙??)
                self.channel_access_token = "dev_token"
                self.channel_secret = "dev_secret"

        # LINE Bot API 閮剖?
        if not self.dev_mode:
            self.configuration = Configuration(access_token=self.channel_access_token)
            self.handler = WebhookHandler(self.channel_secret)
        else:
            # ?璅∪?嚗撱箄??祇?蝵?
            self.configuration = None
            self.handler = None
            logger.info("? ?璅∪?嚗歲??LINE Bot API ????)

        # ??蝡舫?閮剖?
        self.asr_service_url = os.getenv("ASR_SERVICE_URL", "http://localhost:8001")
        self.llm_service_url = os.getenv("LLM_SERVICE_URL", "http://localhost:8002")
        self.tts_service_url = os.getenv("TTS_SERVICE_URL", "http://localhost:8003")
        # ?? ?啣?嚗??嗆??垢暺?
        self.memory_service_url = os.getenv(
            "MEMORY_SERVICE_URL", "http://localhost:8004"
        )

        # OpenAI API 閮剖? (雿 LLM ?隞???
        self.openai_api_key = os.getenv("OPENAI_API_KEY")
        self.use_openai = os.getenv("USE_OPENAI", "false").lower() == "true"

        logger.info("LINE Bot ????????)
        logger.info(f"ASR ??: {self.asr_service_url}")
        logger.info(f"LLM ??: {self.llm_service_url}")
        logger.info(f"TTS ??: {self.tts_service_url}")
        logger.info(f"?? 閮??: {self.memory_service_url}")
        logger.info(f"雿輻 OpenAI: {self.use_openai}")

        # 閮餃?鈭辣????(?璅∪?銋?閬?????
        if not self.dev_mode:
            self._register_handlers()
        else:
            logger.info("? ?璅∪?嚗酉?陛??隞嗉??")
            self._register_dev_handlers()

    def _register_handlers(self):
        """閮餃? LINE Bot 鈭辣????""

        @self.handler.add(MessageEvent, message=AudioMessageContent)
        def handle_audio_message(event):
            """??隤閮"""
            logger.info(f"?嗅隤閮: {event.message.id}")

            # ?刻??航????唾???
            asyncio.create_task(self.process_audio_message(event))

        @self.handler.add(MessageEvent, message=TextMessageContent)
        def handle_text_message(event):
            """????閮"""
            logger.info(f"?嗅??閮: {event.message.text}")

            # ?刻??航???摮???
            asyncio.create_task(self.process_text_message(event))

    def _register_dev_handlers(self):
        """閮餃??璅∪?鈭辣???剁??⊿? LINE SDK嚗?""
        # ?券??潭芋撘?嚗??瘜蝙??LINE SDK ??隞嗉??
        # 雿??隞交?靘?webhook 蝡舫?靘?嗅???閮
        logger.info("? ?璅∪?嚗?隞嗉????? webhook 蝡舫??脰?")

    async def handle_webhook_manually(self, webhook_body: str):
        """?璅∪?嚗?????LINE Webhook 閮"""
        try:
            import json

            # 閫?? JSON
            webhook_data = json.loads(webhook_body)
            events = webhook_data.get("events", [])

            for event in events:
                event_type = event.get("type")
                message = event.get("message", {})
                reply_token = event.get("replyToken")

                logger.info(
                    f"? ??鈭辣: {event_type}, 閮憿?: {message.get('type')}"
                )

                if event_type == "message":
                    message_type = message.get("type")

                    if message_type == "audio":
                        # ??隤閮
                        logger.info("? ??隤閮")
                        await self.handle_audio_message_dev(message, reply_token)

                    elif message_type == "text":
                        # ????閮
                        text_content = message.get("text", "")
                        logger.info(f"? ????閮: {text_content}")
                        await self.handle_text_message_dev(text_content, reply_token)

        except Exception as e:
            logger.error(f"???? Webhook ??隤? {str(e)}")
            raise

    async def handle_audio_message_dev(self, message, reply_token):
        """?璅∪?嚗????唾???""
        try:
            message_id = message.get("id")
            logger.info(f"??儭?????隤閮: {message_id}")

            # 1. 銝?隤瑼??璅∪??航?⊥?銝?嚗蝙?冽葫閰阡瑼?
            logger.info("? ?璅∪?嚗瘜?乩?頛?LINE 隤嚗蝙??ASR 皜祈岫瘚?")

            # 2. 雿輻?身??嚗??箇瘜?敺祕???喳摰對?
            recognized_text = "?望?嚗??潭芋撘??⊥???撖阡?隤?批捆"
            logger.info(f"?? 颲刻?蝯?: {recognized_text}")

            # 3. LLM ??
            llm_response = await self.get_llm_response(recognized_text)
            if not llm_response:
                llm_response = "??函?隤?拍?嚗??璅∪?銝?銵?閮剖?甇?Ⅱ??LINE Token 隞乩蝙?典??游??賬?

            logger.info(f"?? LLM ??: {llm_response}")

            # 4. ????嚗??潭芋撘瘜?閬 LINE嚗?
            logger.info(f"? ?璅∪?嚗瘜?亙?閬 LINE嚗??摰? {llm_response}")

        except Exception as e:
            logger.error(f"?璅∪???隤閮??隤? {str(e)}")

    async def handle_text_message_dev(self, text_content, reply_token):
        """?璅∪?嚗???摮???""
        try:
            logger.info(f"? ?璅∪?????: {text_content}")

            # ?寞??誘??
            if text_content.lower() in ["/help", "撟怠", "隤芣?"]:
                response = "?? ?璅∪?隤芣?嚗n?桀??券??潭芋撘???嚗???賢??n隢身摰?LINE Token 隞乩蝙?典??游??賬?
            elif text_content.lower() in ["/status", "???]:
                response = await self.check_services_status()
            else:
                # LLM ??
                response = await self.get_llm_response(text_content)
                if not response:
                    response = (
                        f"??唳???荔??text_content}?n?桀??券??潭芋撘?????
                    )

            logger.info(f"? ?璅∪???: {response}")

        except Exception as e:
            logger.error(f"?璅∪?????閮??隤? {str(e)}")

    async def process_audio_message(self, event):
        """??隤閮???湔?蝔?(?怨??嗅???"""
        user_id = (
            event.source.user_id if hasattr(event.source, "user_id") else "unknown"
        )

        try:
            # 1. 銝?隤瑼?
            audio_content = await self.download_audio_content(event.message.id)
            if not audio_content:
                await self.reply_text(event.reply_token, "?望?嚗瘜?頛??單?獢?)
                return

            # 2. 隤颲刻?
            recognized_text = await self.transcribe_audio(audio_content)
            if not recognized_text:
                await self.reply_text(event.reply_token, "?望?嚗瘜儘霅???喳摰?)
                return

            logger.info(f"隤颲刻?蝯?: {recognized_text}")

            # ?? 3. 閮??冽隤閮?啗???
            await self.add_message_to_memory(user_id, "user", recognized_text, "voice")

            # 4. 憭扯?閮璅∪??? (雿輻閮銝???
            llm_response = await self.get_llm_response_with_memory(
                user_id, recognized_text
            )
            if not llm_response:
                await self.reply_text(event.reply_token, "?望?嚗瘜?????)
                return

            logger.info(f"LLM ??: {llm_response}")

            # ?? 5. 閮??拇????啗???
            await self.add_message_to_memory(
                user_id, "assistant", llm_response, "voice"
            )

            # 6. 隤??
            audio_file_path = await self.synthesize_speech(llm_response)
            if not audio_file_path:
                # 憒?隤??憭望?嚗??單?摮?
                await self.reply_text(event.reply_token, llm_response)
                return

            # 7. ?隤閮
            await self.reply_audio(event.reply_token, audio_file_path)

            # 皜??冽?瑼?
            if audio_file_path and Path(audio_file_path).exists():
                Path(audio_file_path).unlink()

        except Exception as e:
            logger.error(f"??隤閮??隤? {str(e)}")
            await self.reply_text(event.reply_token, "?望?嚗?????單??潛??航炊")

    async def process_text_message(self, event):
        """????閮 (?怨??嗅???"""
        user_id = (
            event.source.user_id if hasattr(event.source, "user_id") else "unknown"
        )

        try:
            text = event.message.text

            # ?寞??誘??
            if text.lower() in ["/help", "撟怠", "隤芣?"]:
                help_text = """
?? 隤?拍??隤芣?嚗?

? 隤閮嚗???喟策????嚗?
1. 颲刻??函?隤?批捆
2. ?? AI ????
3. 撠????隤?

? ??閮嚗?亙??摮??臭誑撠店

?? 閮?嚗???雿???撠店甇瑕

? ?誘嚗?
/help - 憿舐內甇方牧??
/status - 瑼Ｘ?????
/stats - ?亦?撠店蝯梯?
/clear - 皜撠店閮
/formal - 閮剖?甇??隤矽
/casual - 閮剖?頛?隤矽
                """
                await self.reply_text(event.reply_token, help_text)
                return

            elif text.lower() in ["/status", "???]:
                status = await self.check_services_status()
                await self.reply_text(event.reply_token, status)
                return

            elif text.lower() in ["/stats", "蝯梯?"]:
                stats = await self.get_user_stats(user_id)
                await self.reply_text(event.reply_token, stats)
                return

            elif text.lower() in ["/clear", "皜閮"]:
                success = await self.clear_user_memory(user_id)
                if success:
                    await self.reply_text(event.reply_token, "??撌脫??斗??閰梯???)
                else:
                    await self.reply_text(event.reply_token, "??皜閮憭望?")
                return

            elif text.lower() in ["/formal", "甇??"]:
                await self.set_user_preference(user_id, "language", "formal")
                await self.reply_text(event.reply_token, "??撌脰身摰甇??隤矽")
                return

            elif text.lower() in ["/casual", "頛?"]:
                await self.set_user_preference(user_id, "language", "casual")
                await self.reply_text(event.reply_token, "??撌脰身摰頛?隤矽")
                return

            # ?? 閮??冽??閮?啗???
            await self.add_message_to_memory(user_id, "user", text, "text")

            # 銝?祆?摮?閰?(雿輻閮銝???
            llm_response = await self.get_llm_response_with_memory(user_id, text)
            if llm_response:
                # ?? 閮??拇????啗???
                await self.add_message_to_memory(
                    user_id, "assistant", llm_response, "text"
                )

                # ?岫隤??
                audio_file_path = await self.synthesize_speech(llm_response)
                if audio_file_path:
                    await self.reply_audio(event.reply_token, audio_file_path)
                    # 皜??冽?瑼?
                    if Path(audio_file_path).exists():
                        Path(audio_file_path).unlink()
                else:
                    await self.reply_text(event.reply_token, llm_response)
            else:
                await self.reply_text(event.reply_token, "?望?嚗瘜?????)

        except Exception as e:
            logger.error(f"????閮??隤? {str(e)}")
            await self.reply_text(event.reply_token, "?望?嚗?????舀??潛??航炊")

    async def download_audio_content(self, message_id: str) -> Optional[bytes]:
        """?寥脩?隤?批捆銝??寞?"""
        max_retries = 3
        retry_delay = 1

        for attempt in range(max_retries):
            try:
                logger.info(
                    f"?? ?岫銝?隤?批捆 (蝚?{attempt + 1}/{max_retries} 甈?: {message_id}"
                )

                # 瑼Ｘ??
                if not self.configuration.access_token:
                    logger.error("??LINE Channel Access Token ?芾身摰?)
                    return None

                    # 雿輻?郊 API嚗INE Bot SDK 銝?渡甇伐?
                with ApiClient(self.configuration) as api_client:
                    line_bot_blob_api = MessagingApiBlob(api_client)

                    # 銝?隤?批捆
                    audio_content = line_bot_blob_api.get_message_content(
                        message_id=message_id
                    )

                    if audio_content and len(audio_content) > 0:
                        logger.info(
                            f"????銝?隤?批捆嚗之撠? {len(audio_content)} 摮?"
                        )

                        # 撽??單??澆?
                        if self.validate_audio_content(audio_content):
                            # 靽?隤輯岫?單?嚗?賂?
                            await self.save_audio_for_debug(audio_content, message_id)
                            return audio_content
                        else:
                            logger.warning("?? ?單??澆?撽?憭望?嚗?隞?閰西???)
                            return audio_content  # 隞餈?嚗? ASR ????
                    else:
                        logger.warning(f"?? 銝????喳摰寧蝛?)

            except Exception as e:
                logger.error(f"??蝚?{attempt + 1} 甈∩?頛?閰血仃?? {str(e)}")

                if attempt < max_retries - 1:
                    logger.info(f"??{retry_delay} 蝘??岫...")
                    await asyncio.sleep(retry_delay)
                    retry_delay *= 2  # ????
                else:
                    logger.error("?????頛?閰阡憭望?鈭?)

        return None

    def validate_audio_content(self, audio_content: bytes) -> bool:
        """撽??單??批捆"""
        try:
            # 瑼Ｘ瑼?憭批?
            if len(audio_content) < 100:  # 憭芸??航銝???單?
                logger.warning(f"?? ?單?憭芸?: {len(audio_content)} 摮?")
                return False

            # 瑼Ｘ瑼??哨?M4A ?澆?嚗?
            if (
                audio_content[:4] == b"\x00\x00\x00\x20"
                or audio_content[4:8] == b"ftyp"
            ):
                logger.info("??瑼Ｘ葫??M4A ?澆?")
                return True

            # 瑼Ｘ?嗡?撣貉??單??澆?
            if audio_content[:3] == b"ID3" or audio_content[:2] == b"\xff\xfb":
                logger.info("??瑼Ｘ葫??MP3 ?澆?")
                return True

            if audio_content[:4] == b"RIFF":
                logger.info("??瑼Ｘ葫??WAV ?澆?")
                return True

            logger.warning("?? ?芰?瑼撘?雿匱蝥???)
            return False

        except Exception as e:
            logger.error(f"???單?撽?憭望?: {str(e)}")
            return False

    async def save_audio_for_debug(self, audio_content: bytes, message_id: str) -> str:
        """靽??單??冽隤輯岫"""
        try:
            debug_dir = "debug_audio"
            os.makedirs(debug_dir, exist_ok=True)

            file_path = os.path.join(debug_dir, f"audio_{message_id}.m4a")

            with open(file_path, "wb") as f:
                f.write(audio_content)

            logger.info(f"?? 隤輯岫?單?撌脖?摮? {file_path}")
            return file_path

        except Exception as e:
            logger.error(f"??靽?隤輯岫?單?憭望?: {str(e)}")
            return ""

    async def transcribe_audio(self, audio_content: bytes) -> Optional[str]:
        """?澆 ASR ???脰?隤颲刻?"""
        logger.info(f"??儭???隤颲刻?嚗瑼之撠? {len(audio_content)} 摮?")
        try:
            async with aiohttp.ClientSession() as session:
                # 撱箇??冽?瑼?
                with tempfile.NamedTemporaryFile(
                    suffix=".m4a", delete=False
                ) as temp_file:
                    temp_file.write(audio_content)
                    temp_file_path = temp_file.name

                # 皞?瑼?銝
                with open(temp_file_path, "rb") as f:
                    data = aiohttp.FormData()
                    data.add_field(
                        "audio_file",
                        f,
                        filename="audio.m4a",
                        content_type="audio/x-m4a",
                    )

                    async with session.post(
                        f"{self.asr_service_url}/recognize",
                        data=data,
                        timeout=aiohttp.ClientTimeout(total=120),  # 2 ??頞?
                    ) as response:
                        if response.status == 200:
                            result = await response.json()
                            # ASR ???? transcription 甈?嚗???text
                            transcription = result.get("transcription", "")
                            logger.info(f"??儭?ASR 颲刻???: {transcription}")
                            return transcription
                        else:
                            error_text = await response.text()
                            logger.error(
                                f"ASR ?????航炊: {response.status}, 閰喟敦: {error_text}"
                            )
                            return None

        except Exception as e:
            logger.error(f"??隤颲刻?憭望?: {str(e)}", exc_info=True)
            return None
        finally:
            # 皜??冽?瑼?
            if "temp_file_path" in locals() and Path(temp_file_path).exists():
                Path(temp_file_path).unlink()

    async def get_llm_response(self, text: str) -> Optional[str]:
        """?脣?憭扯?閮璅∪???"""
        if self.use_openai and self.openai_api_key:
            return await self.get_openai_response(text)
        else:
            return await self.get_local_llm_response(text)

    async def get_openai_response(self, text: str) -> Optional[str]:
        """雿輻 OpenAI API ?脣???"""
        import asyncio

        # 憒? OpenAI API ??憿????箄?身??
        fallback_response = self.generate_smart_fallback(text)

        try:
            async with aiohttp.ClientSession() as session:
                headers = {
                    "Authorization": f"Bearer {self.openai_api_key}",
                    "Content-Type": "application/json",
                }

                payload = {
                    "model": "gpt-3.5-turbo",
                    "messages": [
                        {
                            "role": "system",
                            "content": "雿銝????AI?拍?嚗??函?擃葉??????閬陛瞏??准?,
                        },
                        {"role": "user", "content": text},
                    ],
                    "max_tokens": 150,
                    "temperature": 0.7,
                }

                async with session.post(
                    "https://api.openai.com/v1/chat/completions",
                    headers=headers,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=30),
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        return result["choices"][0]["message"]["content"].strip()
                    elif response.status == 429:
                        logger.warning("OpenAI API 隢??嚗蝙?券?閮剖???)
                        return fallback_response
                    else:
                        logger.error(f"OpenAI API ?航炊: {response.status}")
                        return fallback_response

        except asyncio.TimeoutError:
            logger.warning("OpenAI API 頞?嚗蝙?券?閮剖???)
            return fallback_response
        except Exception as e:
            logger.error(f"OpenAI API ?澆憭望?: {str(e)}")
            return fallback_response

    def generate_smart_fallback(self, text: str) -> str:
        """???箄?身??"""
        text_lower = text.lower()

        # ??
        if any(word in text_lower for word in ["雿末", "??", "hello", "hi", "??]):
            return "雿末嚗??舀???喳??敺???冽?????暻澆隞亙鼠?拇??嚗?

        # ???賊?
        elif any(
            word in text
            for word in ["??", "憌?", "??, "??", "?寥ㄙ", "???, "??", "鞊祈?"]
        ):
            return f"??text}??????嚗?撱箄降?典隞伐?\n1. ???賊?憌?蝬脩?\n2. ???蝐n3. 閰Ｗ???撽?撱葦\n\n??迤?典飛蝧葉嚗???敹怨???渲底蝝啁???撱箄降嚗?

        # 憭拇除?賊?
        elif any(word in text for word in ["憭拇除", "皞怠漲", "銝", "?游予", "?啣予"]):
            return "?憭拇除鞈?嚗遣霅唳?臭誑嚗n1. ?亦?憭拇除?APP\n2. ?釣瘞?情撅鞈?\n3. 閫撖?憭祕??瘜n\n?迤?典?飛蝧?靘?予瘞??閮?"

        # ???賊?
        elif any(word in text for word in ["??", "撟暸?", "?曉"]):
            from datetime import datetime

            now = datetime.now()
            return f"?曉??{now.strftime('%Y撟?m??d??%H:%M')}?n\n??暻澆隞隞亙鼠?拇??嚗?

        # ??
        elif any(word in text for word in ["雓?", "??", "thanks", "thank you"]):
            return "銝恥瘞??敺??撟怠?具????隞?憿??冽??賢隞亙???嚗?

        # 閰Ｗ??
        elif any(word in text for word in ["?", "?賢?隞暻?, "?獐??, "撟怠"]):
            return """??函?隤?拍?嚗?隞伐?

? **隤颲刻?**嚗???唾??舐策????頧???摮?
? **??撠店**嚗??脰???撠店
?? **?箄??**嚗?蝑?蝔桀?憿?甇?摮貊?銝哨?

? **雿輻?孵?**嚗?
- ?湔?潮?摮?隤閮
- ???∪????函???
- ?桀?甇???摮貊???脖葉

??暻潭????"""

        # 銝?砍?憿?
        else:
            return f"""??唳???荔??text}??

???? AI ?甇???銝哨?雿?敺????典?閰梧?

? **?隞亙鼠?剁?**
- ??銝?砍?憿?
- ?脰?隤颲刻?
- ???箸鞈?

? **甇??寥莎?**
- ?湔?賜?撠店?賢?
- ?湔?蝣箇???
- ?游?撖衣?

隢匱蝥???閰梧?????摮貊?嚗?""

    async def get_local_llm_response(self, text: str) -> Optional[str]:
        """雿輻?砍 LLM ???脣???"""
        try:
            async with aiohttp.ClientSession() as session:
                payload = {"text": text}

                async with session.post(
                    f"{self.llm_service_url}/generate",
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=60),
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        return result.get("response", "")
                    else:
                        logger.error(f"?砍 LLM ???航炊: {response.status}")
                        return None

        except Exception as e:
            logger.error(f"?砍 LLM ???澆憭望?: {str(e)}")
            return None

    async def synthesize_speech(self, text: str) -> Optional[str]:
        """?澆 TTS ???脰?隤??"""
        try:
            async with aiohttp.ClientSession() as session:
                payload = {"text": text}

                async with session.post(
                    f"{self.tts_service_url}/synthesize",
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=60),
                ) as response:
                    if response.status == 200:
                        # ?脣??單??啗??獢?
                        audio_data = await response.read()
                        temp_file = tempfile.NamedTemporaryFile(
                            suffix=".mp3", delete=False
                        )
                        temp_file.write(audio_data)
                        temp_file.close()
                        return temp_file.name
                    else:
                        logger.error(f"TTS ???航炊: {response.status}")
                        return None

        except Exception as e:
            logger.error(f"隤??憭望?: {str(e)}")
            return None

    async def reply_text(self, reply_token: str, text: str):
        """???閮"""
        try:
            # LINE Bot API 銝?渡甇伐?雿輻?郊隤輻
            with ApiClient(self.configuration) as api_client:
                line_bot_api = MessagingApi(api_client)
                line_bot_api.reply_message(
                    ReplyMessageRequest(
                        reply_token=reply_token, messages=[TextMessage(text=text)]
                    )
                )
                logger.info(f"????????閮: {text[:50]}...")
        except Exception as e:
            logger.error(f"???閮憭望?: {str(e)}")
            # 憒???憭望?嚗撠????臬摰?
            logger.info(f"?? ?閬?閬??批捆: {text}")

    async def reply_audio(self, reply_token: str, audio_file_path: str):
        """?隤閮"""
        try:
            # ?ㄐ?閬??單?銝?啣?祇?閮芸???URL
            # 蝪∪?撖虫?嚗??單?摮牧??
            await self.reply_text(reply_token, "隤??撌脩????閬身摰瑼??單???")
        except Exception as e:
            logger.error(f"?隤閮憭望?: {str(e)}")

    async def check_services_status(self) -> str:
        """瑼Ｘ??????""
        status_info = []

        # 瑼Ｘ ASR ??
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.asr_service_url}/health", timeout=5
                ) as response:
                    if response.status == 200:
                        status_info.append("? ASR ??嚗迤撣?)
                    else:
                        status_info.append("? ASR ??嚗撣?)
        except:
            status_info.append("? ASR ??嚗瘜?")

        # 瑼Ｘ LLM ??
        if self.use_openai:
            status_info.append("? LLM ??嚗penAI API")
        else:
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(
                        f"{self.llm_service_url}/health", timeout=5
                    ) as response:
                        if response.status == 200:
                            status_info.append("? LLM ??嚗迤撣?)
                        else:
                            status_info.append("? LLM ??嚗撣?)
            except:
                status_info.append("? LLM ??嚗瘜?")

        # 瑼Ｘ TTS ??
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.tts_service_url}/health", timeout=5
                ) as response:
                    if response.status == 200:
                        status_info.append("? TTS ??嚗迤撣?)
                    else:
                        status_info.append("? TTS ??嚗撣?)
        except:
            status_info.append("? TTS ??嚗瘜?")

        return "?? ????炎?伐?\n\n" + "\n".join(status_info)

    # ?? ========== 閮??賊??寞? ==========

    async def add_message_to_memory(
        self, user_id: str, role: str, content: str, message_type: str = "text"
    ) -> bool:
        """瘛餃?閮?啁?嗉???""
        try:
            async with aiohttp.ClientSession() as session:
                data = {
                    "user_id": user_id,
                    "role": role,
                    "content": content,
                    "message_type": message_type,
                }

                async with session.post(
                    f"{self.memory_service_url}/add_message",
                    json=data,
                    timeout=aiohttp.ClientTimeout(total=10),
                ) as response:
                    if response.status == 200:
                        logger.debug(f"?? 撌脩?冽 {user_id} 瘛餃? {role} 閮?啗???)
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(
                            f"?? 瘛餃?閮?啗??嗅仃?? {response.status}, {error_text}"
                        )
                        return False

        except Exception as e:
            logger.error(f"?? 閮????憭望?: {e}")
            return False

    async def get_conversation_context(self, user_id: str) -> list:
        """?脣??冽??閰曹?銝?"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.memory_service_url}/conversation_context/{user_id}",
                    timeout=aiohttp.ClientTimeout(total=10),
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        context = result.get("context", [])
                        logger.debug(
                            f"?? ?箇??{user_id} ?脣?鈭?{len(context)} 璇?銝?"
                        )
                        return context
                    else:
                        logger.error(f"?? ?脣?撠店銝??仃?? {response.status}")
                        return []

        except Exception as e:
            logger.error(f"?? ?脣?撠店銝??仃?? {e}")
            return []

    async def get_llm_response_with_memory(
        self, user_id: str, current_message: str
    ) -> Optional[str]:
        """雿輻閮銝????LLM ??"""
        try:
            # ?脣?撠店銝???
            context_messages = await self.get_conversation_context(user_id)

            if self.use_openai and self.openai_api_key:
                # 雿輻 OpenAI API ???嗡?銝?
                return await self.get_openai_response_with_context(
                    context_messages, current_message
                )
            else:
                # 雿輻?砍 LLM ??嚗陛??嚗?亙????荔?
                return await self.get_llm_response(current_message)

        except Exception as e:
            logger.error(f"?? 雿輻閮?脣? LLM ??憭望?: {e}")
            # ???啁閮璅∪?
            return await self.get_llm_response(current_message)

    async def get_openai_response_with_context(
        self, context_messages: list, current_message: str
    ) -> Optional[str]:
        """雿輻 OpenAI API ??銝?????"""
        try:
            # 皞?閮?”
            messages = context_messages.copy()

            # 憒?瘝?蝟餌絞閮嚗溶????
            if not messages or messages[0]["role"] != "system":
                messages.insert(
                    0,
                    {
                        "role": "system",
                        "content": "雿銝???????AI ?拇????賢?閮?????撠店?批捆嚗蒂????疵????,
                    },
                )

            # 瘛餃??嗅??冽閮
            messages.append({"role": "user", "content": current_message})

            # ?澆 OpenAI API
            import openai

            openai.api_key = self.openai_api_key

            response = await openai.ChatCompletion.acreate(
                model="gpt-3.5-turbo",
                messages=messages,
                max_tokens=500,
                temperature=0.7,
            )

            assistant_message = response.choices[0].message.content.strip()
            logger.info(f"?? OpenAI ?? (?怨???: {assistant_message[:50]}...")
            return assistant_message

        except Exception as e:
            logger.error(f"?? OpenAI API ?航炊 (?怨???: {e}")
            return await self.generate_smart_fallback(current_message)

    async def get_user_stats(self, user_id: str) -> str:
        """?脣??冽蝯梯?鞈?"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.memory_service_url}/user_stats/{user_id}",
                    timeout=aiohttp.ClientTimeout(total=10),
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        stats = result.get("stats", {})

                        stats_text = f"""
?? ?函?撠店蝯梯?嚗?

? 蝮賢?閰望活?賂?{stats.get('total_messages', 0)}
?儭??嗅??店閮嚗stats.get('current_session_messages', 0)}
??儭?隤閮嚗stats.get('voice_messages', 0)}
? ??閮嚗stats.get('text_messages', 0)}
?? AI ??嚗stats.get('assistant_messages', 0)}
???敺???{stats.get('last_interaction', 'N/A')}

閮剖??末嚗stats.get('preferences', {})}
                        """
                        return stats_text.strip()
                    else:
                        return "???⊥??脣?蝯梯?鞈?"

        except Exception as e:
            logger.error(f"?? ?脣??冽蝯梯?憭望?: {e}")
            return "???脣?蝯梯?鞈???隤?

    async def clear_user_memory(self, user_id: str) -> bool:
        """皜?冽閮"""
        try:
            async with aiohttp.ClientSession() as session:
                data = {"user_id": user_id}

                async with session.post(
                    f"{self.memory_service_url}/clear_memory",
                    json=data,
                    timeout=aiohttp.ClientTimeout(total=10),
                ) as response:
                    if response.status == 200:
                        logger.info(f"?? 撌脫??斤??{user_id} ????)
                        return True
                    else:
                        logger.error(f"?? 皜閮憭望?: {response.status}")
                        return False

        except Exception as e:
            logger.error(f"?? 皜閮憭望?: {e}")
            return False

    async def set_user_preference(self, user_id: str, key: str, value: str) -> bool:
        """閮剖??冽?末"""
        try:
            async with aiohttp.ClientSession() as session:
                data = {"user_id": user_id, "key": key, "value": value}

                async with session.post(
                    f"{self.memory_service_url}/set_preference",
                    json=data,
                    timeout=aiohttp.ClientTimeout(total=10),
                ) as response:
                    if response.status == 200:
                        logger.info(f"?? 撌脩?冽 {user_id} 閮剖??末 {key}={value}")
                        return True
                    else:
                        logger.error(f"?? 閮剖??末憭望?: {response.status}")
                        return False

        except Exception as e:
            logger.error(f"?? 閮剖??末憭望?: {e}")
            return False


# ?典???撖虫?
linebot_service = None


@app.on_event("startup")
async def startup_event():
    """?????憪???"""
    global linebot_service

    # 頛?啣?霈
    from dotenv import load_dotenv

    load_dotenv()

    logger.info("甇?????LINE Bot ??...")
    linebot_service = LineBotService()
    logger.info("LINE Bot ????????")


@app.get("/")
def read_root():
    """?亙熒瑼Ｘ蝡舫?"""
    if not linebot_service:
        return {
            "message": "LINE Bot ?????葉...",
            "status": "initializing",
        }

    return {
        "message": "LINE Bot ??撌脣???,
        "status": "healthy",
        "dev_mode": linebot_service.dev_mode,
        "services": {
            "asr": linebot_service.asr_service_url,
            "llm": linebot_service.llm_service_url,
            "tts": linebot_service.tts_service_url,
        },
    }


@app.post("/test_voice")
async def test_voice_processing(audio_file: UploadFile = File(...)):
    """?璅∪?嚗葫閰西??唾???蝔?""
    if not linebot_service:
        raise HTTPException(status_code=503, detail="??撠????)

    if not linebot_service.dev_mode:
        raise HTTPException(status_code=403, detail="甇文??賢??券??潭芋撘??舐")

    try:
        logger.info("?妒 ?璅∪?嚗?憪葫閰西??唾???蝔?)

        # 霈???喟??單?
        audio_content = await audio_file.read()

        # 隤颲刻?
        recognized_text = await linebot_service.transcribe_audio(audio_content)
        if not recognized_text:
            return JSONResponse(content={"success": False, "error": "隤颲刻?憭望?"})

        # LLM ??
        llm_response = await linebot_service.get_llm_response(recognized_text)
        if not llm_response:
            return JSONResponse(content={"success": False, "error": "LLM ????憭望?"})

        return JSONResponse(
            content={
                "success": True,
                "recognized_text": recognized_text,
                "llm_response": llm_response,
                "message": "隤??瘚?皜祈岫??",
            }
        )

    except Exception as e:
        logger.error(f"皜祈岫隤????隤? {str(e)}")
        return JSONResponse(content={"success": False, "error": str(e)})


@app.post("/webhook")
async def webhook(request: Request):
    """LINE Bot Webhook 蝡舫?"""
    if not linebot_service:
        raise HTTPException(status_code=503, detail="??撠????)

    # ??隢??批捆
    body = await request.body()
    signature = request.headers.get("X-Line-Signature", "")

    # ?璅∪?嚗歲?偷??霅??湔??閮
    if linebot_service.dev_mode:
        logger.info("? ?璅∪?嚗?嗅 Webhook 隢?嚗歲?偷??霅?)
        try:
            # 閫?? LINE 閮
            webhook_body = body.decode("utf-8")
            logger.info(f"? Webhook ?批捆: {webhook_body}")

            # ???? LINE 閮
            await linebot_service.handle_webhook_manually(webhook_body)

            return JSONResponse(content={"status": "ok"})
        except Exception as e:
            logger.error(f"?璅∪??? Webhook ??隤? {str(e)}")
            return JSONResponse(content={"status": "error", "message": str(e)})

    # 甇?虜璅∪?嚗蝙??LINE SDK ??
    try:
        linebot_service.handler.handle(body.decode("utf-8"), signature)
        return JSONResponse(content={"status": "ok"})
    except InvalidSignatureError:
        logger.error("LINE Webhook 蝪賢?撽?憭望?")
        raise HTTPException(status_code=400, detail="Invalid signature")
    except Exception as e:
        logger.error(f"?? Webhook ??隤? {str(e)}")
        raise HTTPException(status_code=500, detail="Internal server error")


if __name__ == "__main__":
    # 敺憓??詨?敺身摰?
    host = os.getenv("LINEBOT_HOST", "0.0.0.0")
    port = int(os.getenv("LINEBOT_PORT", "8000"))

    uvicorn.run(app, host=host, port=port, log_level="debug")

